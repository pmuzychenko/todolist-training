{"version":3,"sources":["api/todolist-api.ts","reportWebVitals.ts","app/app-reducer.ts","utils/error-utils.ts","features/TodolistsList/Todolist/todolists-reducer.ts","features/TodolistsList/Todolist/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/Todolist/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","app/AppWithRedux.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","ResponseFromServer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","get","todolistId","title","put","post","delete","taskId","model","initialState","status","error","setAppStatusAC","type","setAppErrorAC","handleServerAppError","data","dispatch","messages","length","handleServerNetworkError","message","UpdateTaskTC","domainModel","getState","checkedTask","tasks","find","task","id","apiModel","deadline","description","priority","startDate","res","resultCode","Success","updateTaskAC","catch","console","warn","AddItemForm","React","memo","props","log","useState","setTitle","setError","addItem","trim","className","variant","size","value","onChange","e","newTitle","currentTarget","onKeyPress","key","label","helperText","IconButton","color","onClick","disabled","AddBox","EditableSpan","editMode","setEditMode","onBlur","onChangeTitle","autoFocus","onDoubleClick","Task","changeTaskStatus","onChangeTaskTitle","removeTask","changeTaskStatusHandler","useCallback","newIsDoneValue","checked","Completed","New","Checkbox","Delete","Todolist","entityStatus","changeFilterForTask","_addNewTask","filter","_removeTodolist","_onChangeTodolistTitle","useDispatch","useEffect","setTasksAC","items","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","addNewTask","removeTodolist","onChangeTodolistTitle","tasksForTodolist","t","map","Button","TodolistsList","todolists","useSelector","state","addTodolist","todolist","item","createTodolistTC","changeTodolistEntityStatusAC","removeTodolistAC","removeTodolistTC","changeTodolistTitleAC","updateTodolistTitleTC","changeTodolistFilterAC","newStatus","removeTaskAC","RemoveTaskTC","addTask","AddTaskTC","Grid","container","style","padding","spacing","tl","Paper","Alert","elevation","ErrorSnackbar","appStatus","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","AppWithRedux","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","rootReducer","combineReducers","action","stateCopy","forEach","todoListId","copyState","store","createStore","applyMiddleware","thunk","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fcff2d96.chunk.js","sourcesContent":["import axios from 'axios'\r\nimport {RequestStatusType} from \"../app/app-reducer\";\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'b9ba1f54-fd53-4073-a80c-f6586b8bff61'\r\n    }\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\n\r\n//api\r\nexport const todolistAPI = {\r\n    getTodolists(){\r\n        return instance.get<Array<TodolistType>>('todo-lists')\r\n    },\r\n\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${todolistId}`, {title})\r\n    },\r\n\r\n    createTodolist(title: string){\r\n        return instance.post<ResponseType<{item: TodolistType}>>('todo-lists', {title})\r\n    },\r\n\r\n    deleteTodolist(todolistId: string){\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType ) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    },\r\n}\r\n\r\n\r\n//types\r\nexport type TodolistType= {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport enum ResponseFromServer {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\n\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\n\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","export type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type ResponseErrorType = string | null\r\n\r\nconst initialState = {\r\n    status: 'loading' as RequestStatusType,\r\n    error: null as ResponseErrorType\r\n}\r\ntype InitialStateType = typeof initialState\r\nexport const appReducer = (state: InitialStateType = initialState ,action: ActionsType):InitialStateType => {\r\n    switch (action.type){\r\n        case 'APP/SET-STATUS': {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        case 'APP/SET-ERROR': {\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\ntype ActionsType = setAppStatusActionType | setAppErrorActionType\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setAppErrorAC = (error: ResponseErrorType) => ({type: 'APP/SET-ERROR', error} as const)\r\n\r\nexport type setAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type setAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\n","import {setAppErrorAC, setAppErrorActionType, setAppStatusAC, setAppStatusActionType} from '../app/app-reducer';\r\nimport { Dispatch } from 'redux';\r\nimport {ResponseType} from '../api/todolist-api'\r\n\r\n// generic function\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: ErrorUtilsDispatchType) => {\r\n    dispatch(setAppErrorAC(error.message))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<setAppStatusActionType | setAppErrorActionType>","import {ResponseFromServer, todolistAPI, TodolistType} from \"../../../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType, setAppStatusAC} from \"../../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../../utils/error-utils\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case \"GET-TODOLISTS\": {\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: \"idle\"}))\r\n        }\r\n\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl.id !== action.todolistId)\r\n        }\r\n\r\n        case 'ADD-TODOLIST': {\r\n            return [{...action.todolist, filter: 'all', entityStatus: \"idle\"}, ...state]\r\n        }\r\n\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            return state.map(tl => tl.id === action.todolistId ? {...tl, title: action.title} : tl)\r\n        }\r\n\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            return state.map(tl => tl.id === action.todolistId ? {...tl, filter: action.filter} : tl)\r\n        }\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS': {\r\n            return state.map(tl => tl.id === action.todolistId ? {...tl, entityStatus: action.entityStatus} : tl)\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const removeTodolistAC = (todolistId: string) => ({type: 'REMOVE-TODOLIST', todolistId} as const)\r\n\r\nexport const addTodolistAC = (todolist: TodolistType) =>\r\n    ({type: 'ADD-TODOLIST', todolist} as const)\r\n\r\nexport const changeTodolistTitleAC = (title: string, todolistId: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    title,\r\n    todolistId\r\n} as const)\r\n\r\nexport const changeTodolistFilterAC = (todolistId: string, filter: FilterValuesType,) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    filter,\r\n    todolistId\r\n} as const)\r\n\r\nexport const getTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'GET-TODOLISTS', todolists} as const)\r\n\r\nexport const changeTodolistEntityStatusAC = (todolistId: string, entityStatus: RequestStatusType ) => ({type: 'CHANGE-TODOLIST-ENTITY-STATUS', todolistId, entityStatus} as const)\r\n\r\n//thunks\r\nexport const getTodolistTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.getTodolists()\r\n        .then(res => {\r\n            dispatch(getTodolistsAC(res.data))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(error,dispatch)\r\n        })\r\n}\r\n\r\nexport const removeTodolistTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTodolistEntityStatusAC(todolistId,'loading'))\r\n\r\n    todolistAPI.deleteTodolist(todolistId)\r\n        .then(() => {\r\n            dispatch(removeTodolistAC(todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(error,dispatch)\r\n        })\r\n}\r\n\r\nexport const createTodolistTC = (title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.createTodolist(title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === ResponseFromServer.Success) {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(error,dispatch)\r\n        })\r\n}\r\n\r\nexport const updateTodolistTitleTC = (todolistId: string, title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.updateTodolist(todolistId, title)\r\n        .then(() => {\r\n            dispatch(changeTodolistTitleAC(title, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(error,dispatch)\r\n        })\r\n}\r\n\r\n//types\r\n\r\n\r\ntype ActionsType =\r\n    | ReturnType<typeof getTodolistsAC>\r\n    | ReturnType<typeof removeTodolistAC>\r\n    | ReturnType<typeof addTodolistAC>\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}","import {\r\n    ResponseFromServer,\r\n    TaskPriorities,\r\n    TaskStatuses,\r\n    TaskType,\r\n    todolistAPI,\r\n    UpdateTaskModelType\r\n} from \"../../../api/todolist-api\";\r\nimport {TaskStateType} from \"../../../app/AppWithRedux\";\r\nimport {Dispatch} from 'redux';\r\nimport {AppRootStateType} from \"../../../app/store\";\r\nimport {addTodolistAC, getTodolistsAC, removeTodolistAC} from \"./todolists-reducer\";\r\nimport {setAppStatusAC} from \"../../../app/app-reducer\";\r\nimport { handleServerAppError, handleServerNetworkError } from \"../../../utils/error-utils\";\r\n\r\n\r\nconst initialState: TaskStateType = {}\r\n\r\nexport const tasksReducer = (state: TaskStateType = initialState, action: ActionsType): TaskStateType => {\r\n    switch (action.type) {\r\n        case \"GET-TODOLISTS\": {\r\n            let stateCopy = {...state}\r\n            action.todolists.forEach(tl => stateCopy[tl.id] = [])\r\n            return stateCopy\r\n        }\r\n        case 'REMOVE-TASK': {\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        }\r\n        case 'ADD-TASK': {\r\n            return {\r\n                ...state,\r\n                [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]\r\n            }\r\n        }\r\n        case 'UPDATE-TASK': {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.todolist.id]: []\r\n            }\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const copyState = {...state};\r\n            delete copyState[action.todolistId];\r\n            return copyState;\r\n        }\r\n        case \"SET-TASKS\": {\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n//actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => ({\r\n    type: 'REMOVE-TASK',\r\n    taskId: taskId,\r\n    todolistId: todolistId\r\n} as const)\r\n\r\nexport const addTaskAC = (task: TaskType) => ({type: 'ADD-TASK', task} as const)\r\n\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) => ({\r\n    type: 'UPDATE-TASK',\r\n    model,\r\n    todolistId,\r\n    taskId\r\n} as const)\r\n\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => ({\r\n    type: 'SET-TASKS',\r\n    tasks,\r\n    todolistId\r\n} as const)\r\n\r\n\r\n//thunks\r\nexport const SetTasksTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.getTasks(todolistId)\r\n        .then(res => {\r\n            dispatch(setTasksAC(res.data.items, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(error,dispatch)\r\n        })\r\n}\r\n\r\nexport const RemoveTaskTC = (todolistId: string, taskId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.deleteTask(todolistId, taskId)\r\n        .then(() => {\r\n            dispatch(removeTaskAC(taskId, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(error,dispatch)\r\n        })\r\n}\r\n\r\nexport const AddTaskTC = (todolistId: string, title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.createTask(todolistId, title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === ResponseFromServer.Success) {\r\n                dispatch((addTaskAC(res.data.data.item)))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(error,dispatch)\r\n        })\r\n}\r\n\r\n\r\nexport const UpdateTaskTC = (todolistId: string, taskId: string, domainModel: UpdateDomainTaskModelType) => (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n    const tasks = getState().tasks\r\n    const tasksForCurrentTodolist = tasks[todolistId]\r\n    const checkedTask = tasksForCurrentTodolist.find(task => task.id === taskId)\r\n    if (!checkedTask) {\r\n        console.warn('Task is not exist in the state')\r\n        return\r\n    }\r\n    const apiModel: UpdateTaskModelType = {\r\n        deadline: checkedTask.deadline,\r\n        description: checkedTask.description,\r\n        priority: checkedTask.priority,\r\n        startDate: checkedTask.startDate,\r\n        status: checkedTask.status,\r\n        title: checkedTask.title,\r\n        ...domainModel\r\n    }\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.updateTask(todolistId, taskId, apiModel)\r\n        .then((res) => {\r\n            if (res.data.resultCode === ResponseFromServer.Success) {\r\n                dispatch(updateTaskAC(taskId, domainModel, todolistId))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(error,dispatch)\r\n        })\r\n}\r\n\r\n// types\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | ReturnType<typeof addTodolistAC>\r\n    | ReturnType<typeof removeTodolistAC>\r\n    | ReturnType<typeof getTodolistsAC>\r\n    | ReturnType<typeof setTasksAC>\r\n\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport TextField from '@material-ui/core/TextField/TextField';\r\nimport {AddBox} from \"@material-ui/icons\";\r\nimport {IconButton} from \"@material-ui/core\";\r\n\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n    console.log(\"AddItemForm is called\")\r\n    const [title, setTitle] = useState('')\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== '') {\r\n            props.addItem(title)\r\n            setTitle('')\r\n        } else {\r\n            setError('The title is required')\r\n        }\r\n    }\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setError('')\r\n        let newTitle = e.currentTarget.value\r\n        setTitle(newTitle)\r\n    }\r\n\r\n    const onPressKeyHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n        if (e.key === 'Enter') {\r\n            addItem()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='addItemForm'>\r\n            <TextField\r\n                variant={'outlined'}\r\n                size={'small'}\r\n                value={title}\r\n                onChange={onChangeTitle}\r\n                onKeyPress={onPressKeyHandler}\r\n                error={!!error}\r\n                label={'Title'}\r\n                helperText={error}\r\n            />\r\n            <IconButton color='primary' onClick={addItem} disabled={props.disabled}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    );\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\n\r\nexport type EditableSpanPropsType = {\r\n    value: string\r\n    onChangeTitle: (newValue: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo(function(props: EditableSpanPropsType) {\r\n    console.log('Editable span is called')\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.value)\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.value)\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChangeTitle(title)\r\n    }\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title}\r\n                     onChange={changeTitle}\r\n                     onBlur={activateViewMode}\r\n                     disabled={props.disabled}\r\n                     autoFocus/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n})\r\n","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport {IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TaskType} from \"../../../../api/todolist-api\";\r\n\r\nexport type TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    removeTask: (id: string, todolistId: string) => void\r\n    onChangeTaskTitle: (id: string, newTitle: string, todolistId: string) => void\r\n}\r\nexport const Task: React.FC<TaskPropsType> = React.memo(({task, todolistId, changeTaskStatus, onChangeTaskTitle, removeTask}) => {\r\n    console.log('Task is called')\r\n\r\n    const changeTaskStatusHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        changeTaskStatus(task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, todolistId)\r\n    }, [task.id, todolistId]);\r\n\r\n\r\n    const removeTaskHandler = () => {\r\n        removeTask(task.id, todolistId)\r\n    }\r\n\r\n    const onChangeTitle = useCallback((newTitle: string) => {\r\n        onChangeTaskTitle(task.id, newTitle, todolistId)\r\n    }, [onChangeTaskTitle, task.id, todolistId])\r\n\r\n    return (\r\n        <div className='tasks'>\r\n            <div key={task.id} className={task.status ? 'is-done' : ''}>\r\n                <Checkbox checked={task.status === TaskStatuses.Completed}\r\n                          onChange={changeTaskStatusHandler}\r\n                          color='primary'\r\n                />\r\n                <EditableSpan value={task.title} onChangeTitle={onChangeTitle}/>\r\n                <IconButton onClick={removeTaskHandler}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </div>\r\n        </div>\r\n    )\r\n})","import React, {useCallback, useEffect} from 'react';\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm';\r\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {FilterValuesType} from \"./todolists-reducer\";\r\nimport {TaskStatuses, TaskType} from \"../../../api/todolist-api\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {SetTasksTC} from \"./tasks-reducer\";\r\nimport { RequestStatusType } from '../../../app/app-reducer';\r\n\r\ntype PropsType = {\r\n    title: string\r\n    entityStatus: RequestStatusType\r\n    tasks: Array<TaskType>\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    removeTask: (id: string, todolistId: string) => void\r\n    changeFilterForTask: (filter: FilterValuesType, todolistId: string) => void\r\n    _addNewTask: (title: string, todolistId: string) => void\r\n    filter: FilterValuesType\r\n    id: string\r\n    _removeTodolist: (todolistId: string) => void\r\n    onChangeTaskTitle: (id: string, newTitle: string, todolistId: string) => void\r\n    _onChangeTodolistTitle: (newTitle: string, todolistId: string) => void\r\n}\r\n\r\nexport const Todolist: React.FC<PropsType> = React.memo(function (\r\n    {\r\n        id, title, entityStatus, tasks, changeTaskStatus, removeTask, changeFilterForTask, _addNewTask, filter,\r\n        _removeTodolist, onChangeTaskTitle, _onChangeTodolistTitle\r\n    }\r\n) {\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(SetTasksTC(id))\r\n    }, [])\r\n\r\n    const onAllClickHandler = useCallback(() => {\r\n        changeFilterForTask('all', id)\r\n    }, [changeFilterForTask, id])\r\n\r\n    const onActiveClickHandler = useCallback(() => {\r\n        changeFilterForTask('active', id)\r\n    }, [changeFilterForTask, id])\r\n\r\n    const onCompletedClickHandler = useCallback(() => {\r\n        changeFilterForTask('completed', id)\r\n    }, [changeFilterForTask, id])\r\n\r\n    const addNewTask = useCallback((title: string) => {\r\n        _addNewTask(title, id)\r\n    }, [_addNewTask, id])\r\n\r\n\r\n    const removeTodolist = useCallback(() => {\r\n        _removeTodolist(id)\r\n    }, [_removeTodolist, id])\r\n\r\n    const onChangeTodolistTitle = useCallback((newTitle: string) => {\r\n        _onChangeTodolistTitle(newTitle, id)\r\n    }, [_onChangeTodolistTitle, id])\r\n\r\n    let tasksForTodolist = tasks\r\n\r\n    if (filter === 'active') {\r\n        tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (filter === 'completed') {\r\n        tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return (\r\n        <div className='todolist'>\r\n            <div>\r\n                <h2><EditableSpan value={title}\r\n                                  onChangeTitle={onChangeTodolistTitle}\r\n                                  disabled={entityStatus==='loading'}/>\r\n                    <IconButton onClick={removeTodolist} disabled={entityStatus==='loading'}>\r\n                        <Delete/>\r\n                    </IconButton>\r\n                </h2>\r\n            </div>\r\n            <AddItemForm addItem={addNewTask} disabled={entityStatus==='loading'}/>\r\n            <div>\r\n                {tasksForTodolist.map(task => <Task\r\n                    key={task.id}\r\n                    task={task} todolistId={id} removeTask={removeTask}\r\n                    changeTaskStatus={changeTaskStatus} onChangeTaskTitle={onChangeTaskTitle}\r\n                />)}\r\n            </div>\r\n            <div className='buttons'>\r\n                <Button\r\n                    variant={'contained'}\r\n                    color={filter === 'all' ? 'primary' : 'default'}\r\n                    onClick={onAllClickHandler}>All\r\n                </Button>\r\n                <Button\r\n                    variant={'contained'}\r\n                    color={filter === 'active' ? 'primary' : 'default'}\r\n                    onClick={onActiveClickHandler}>Active\r\n                </Button>\r\n                <Button\r\n                    variant={'contained'}\r\n                    color={filter === 'completed' ? 'primary' : 'default'}\r\n                    onClick={onCompletedClickHandler}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../app/store\";\r\nimport {\r\n    changeTodolistFilterAC,\r\n    createTodolistTC, FilterValuesType,\r\n    getTodolistTC,\r\n    removeTodolistTC,\r\n    TodolistDomainType,\r\n    updateTodolistTitleTC\r\n} from \"./todolists-reducer\";\r\nimport {TaskStatuses} from \"../../../api/todolist-api\";\r\nimport {AddTaskTC, RemoveTaskTC, UpdateTaskTC} from \"./tasks-reducer\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {AddItemForm} from \"../../../components/AddItemForm/AddItemForm\";\r\nimport {Todolist} from \"./Todolist\";\r\nimport {TaskStateType} from \"../../../app/AppWithRedux\";\r\n\r\ntype TodolistsListPropsType = {}\r\nexport const TodolistsList: React.FC<TodolistsListPropsType> = (props) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TaskStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(getTodolistTC())\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(createTodolistTC(title))\r\n    }, [dispatch]);\r\n\r\n    const removeTodolist = useCallback((todolistId: string) => {\r\n        dispatch(removeTodolistTC(todolistId))\r\n    }, []);\r\n\r\n    const onChangeTodolistTitle = useCallback((newTitle: string, todolistId: string) => {\r\n        dispatch(updateTodolistTitleTC(todolistId, newTitle))\r\n    }, []);\r\n\r\n    const changeFilterForTask = useCallback((filter: FilterValuesType, todolistId: string) => {\r\n        dispatch(changeTodolistFilterAC(todolistId, filter))\r\n    }, []);\r\n\r\n    const changeTaskStatus = useCallback((id: string, newStatus: TaskStatuses, todolistId: string) => {\r\n        dispatch(UpdateTaskTC(todolistId, id, {status: newStatus}))\r\n    }, []);\r\n\r\n    const onChangeTaskTitle = useCallback((id: string, newTitle: string, todolistId: string) => {\r\n        dispatch(UpdateTaskTC(todolistId, id, {title: newTitle}))\r\n    }, []);\r\n\r\n    const removeTask = useCallback((id: string, todolistId: string) => {\r\n        dispatch(RemoveTaskTC(todolistId, id))\r\n    }, []);\r\n\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        dispatch(AddTaskTC(todolistId, title))\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: '20px'}}>\r\n                <AddItemForm addItem={addTodolist}/>\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                {\r\n                    todolists.map(tl => {\r\n\r\n                        let tasksForTodolist = tasks[tl.id]\r\n\r\n                        return <Grid item>\r\n                            <Paper style={{padding: '10px'}}>\r\n                                <Todolist title={tl.title}\r\n                                          id={tl.id}\r\n                                          key={tl.id}\r\n                                          entityStatus={tl.entityStatus}\r\n                                          changeTaskStatus={changeTaskStatus}\r\n                                          removeTask={removeTask}\r\n                                          tasks={tasksForTodolist}\r\n                                          changeFilterForTask={changeFilterForTask}\r\n                                          _addNewTask={addTask}\r\n                                          filter={tl.filter}\r\n                                          _removeTodolist={removeTodolist}\r\n                                          onChangeTaskTitle={onChangeTaskTitle}\r\n                                          _onChangeTodolistTitle={onChangeTodolistTitle}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                    })\r\n                }\r\n            </Grid>\r\n        </>\r\n    )\r\n}","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {ResponseErrorType, setAppErrorAC} from \"../../app/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, ResponseErrorType>( state => state.appStatus.error)\r\n    const dispatch = useDispatch()\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import {AppBar, Button, Container, IconButton, LinearProgress, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from '@material-ui/icons';\r\nimport {TaskType} from \"../api/todolist-api\";\r\nimport {TodolistsList} from \"../features/TodolistsList/Todolist/TodolistsList\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {RequestStatusType} from \"./app-reducer\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\n\r\n\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction AppWithRedux() {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>( state => state.appStatus.status)\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar />\r\n            <AppBar position={'static'}>\r\n                <Toolbar>\r\n                    <IconButton edge={'start'} color={'inherit'} aria-label={'menu'}>\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant={'h6'}>\r\n                        News\r\n                    </Typography>\r\n                    <Button color={'inherit'}>Login</Button>\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress color={'secondary'} />}\r\n            </AppBar>\r\n\r\n            <Container>\r\n                <TodolistsList />\r\n            </Container>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default AppWithRedux;\r\n","import {tasksReducer} from '../features/TodolistsList/Todolist/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/Todolist/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from \"redux-thunk\";\r\nimport {appReducer} from \"./app-reducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    appStatus: appReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './app/index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport AppWithRedux from './app/AppWithRedux';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './app/store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <Provider store={store}>\r\n          <AppWithRedux />\r\n      </Provider>\r\n\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}