{"version":3,"sources":["reportWebVitals.ts","AddItemForm.tsx","EditableSpan.tsx","Todolist.tsx","state/todolists-reducer.ts","state/tasks-reducer.ts","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AddItemForm","props","useState","title","setTitle","error","setError","addItem","trim","className","variant","size","value","onChange","e","newTitle","currentTarget","onKeyPress","key","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","onBlur","onChangeTitle","autoFocus","onDoubleClick","Todolist","onChangeTodolistTitle","id","removeTodolist","Delete","addNewTask","tasks","map","task","isDone","Checkbox","checked","changeTaskStatus","onChangeTaskTitle","removeTask","Button","filter","changeFilterForTask","initialState","AppWithRedux","todolists","useSelector","state","dispatch","useDispatch","newStatus","todolistId","taskId","type","ChangeTaskStatusAC","RemoveTaskAC","addTask","AddTaskAC","action","RemoveTodolistAC","ChangeTaskTitleAC","ChangeTodolistTitleAC","ChangeTodolistFilterAC","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","Grid","container","style","padding","v1","AddTodolistAC","spacing","tl","tasksForTodolist","item","Paper","rootReducer","combineReducers","newTask","copyState","todolist","find","filteredTodolist","store","createStore","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.65ff01da.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport TextField from '@material-ui/core/TextField/TextField';\r\nimport {AddBox} from \"@material-ui/icons\";\r\nimport {IconButton} from \"@material-ui/core\";\r\n\r\n\r\ntype PropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nfunction AddItemForm(props: PropsType) {\r\n    const [title, setTitle] = useState('')\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== '') {\r\n            props.addItem(title)\r\n            setTitle('')\r\n        } else {\r\n            setError('The title is required')\r\n        }\r\n    }\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setError('')\r\n        let newTitle = e.currentTarget.value\r\n        setTitle(newTitle)\r\n    }\r\n\r\n    const onPressKeyHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            addItem()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='addItemForm'>\r\n            <TextField\r\n                variant={'outlined'}\r\n                size={'small'}\r\n                value={title}\r\n                onChange={onChangeTitle}\r\n                onKeyPress={onPressKeyHandler}\r\n                error={!!error}\r\n                label={'Title'}\r\n                helperText={error}\r\n            />\r\n\r\n            {/*<Button variant='contained' color='primary' size='small' onClick={addItem}>+</Button>*/}\r\n            <IconButton color='primary' onClick={addItem}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AddItemForm;\r\n","import React, {ChangeEvent, useState} from 'react';\nimport {TextField} from \"@material-ui/core\";\n\n\ntype PropsType = {\n    value: string\n    onChangeTitle: (newValue: string) => void\n}\n\nfunction EditableSpan(props: PropsType) {\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const [title, setTitle] = useState<string>(props.value)\n\n    const activateEditMode = () => {\n        setEditMode(true)\n        setTitle(props.value)\n    }\n    const activateViewMode = () => {\n        setEditMode(false)\n        props.onChangeTitle(title)\n    }\n\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    return editMode\n       ? <TextField value={title} onChange={changeTitle} onBlur={activateViewMode} autoFocus/>\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\n}\n\nexport default EditableSpan;\n","import React, {ChangeEvent} from 'react';\r\nimport {FilterTaskValues, TaskType} from \"./App\";\r\nimport AddItemForm from './AddItemForm';\r\nimport EditableSpan from \"./EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\n\r\ntype PropsType = {\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeTaskStatus: (id: string, value: boolean, todolistId: string) => void\r\n    removeTask: (id: string, todolistId: string) => void\r\n    changeFilterForTask: (filter: FilterTaskValues, todolistId: string) => void\r\n    addNewTask: (title: string, todolistId: string) => void\r\n    filter: FilterTaskValues\r\n    id: string\r\n    removeTodolist: (todolistId: string) => void\r\n    onChangeTaskTitle: (id: string, newTitle: string, todolistId: string) => void\r\n    onChangeTodolistTitle: (newTitle: string, todolistId: string) => void\r\n}\r\n\r\nfunction Todolist(props: PropsType) {\r\n\r\n    const onAllClickHandler = () => {\r\n        props.changeFilterForTask('All', props.id)\r\n    }\r\n    const onActiveClickHandler = () => {\r\n        props.changeFilterForTask('Active', props.id)\r\n    }\r\n    const onCompletedClickHandler = () => {\r\n        props.changeFilterForTask('Completed', props.id)\r\n    }\r\n\r\n    const addNewTask = (title: string) => {\r\n        props.addNewTask(title, props.id)\r\n    }\r\n\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const onChangeTodolistTitle = (newTitle: string) => {\r\n        props.onChangeTodolistTitle(newTitle, props.id)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className='todolist'>\r\n            <div>\r\n                <h2><EditableSpan value={props.title} onChangeTitle={onChangeTodolistTitle}/>\r\n                    <IconButton onClick={removeTodolist}>\r\n                        <Delete/>\r\n                    </IconButton>\r\n                </h2>\r\n            </div>\r\n            <AddItemForm addItem={addNewTask}/>\r\n            <div>\r\n                {props.tasks.map(task => {\r\n                    const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        props.changeTaskStatus(task.id, e.currentTarget.checked, props.id)\r\n                    }\r\n                    const removeTaskHandler = () => {\r\n                        props.removeTask(task.id, props.id)\r\n                    }\r\n                    const onChangeTitle = (newTitle: string) => {\r\n                        props.onChangeTaskTitle(task.id, newTitle, props.id)\r\n                    }\r\n\r\n                    return (\r\n                        <div className='tasks'>\r\n                            <div key={task.id} className={task.isDone ? 'is-done' : ''}>\r\n                                <Checkbox checked={task.isDone}\r\n                                          onChange={changeTaskStatus}\r\n                                          color='primary'\r\n                                />\r\n                                <EditableSpan value={task.title} onChangeTitle={onChangeTitle}/>\r\n                                <IconButton onClick={removeTaskHandler}>\r\n                                    <Delete/>\r\n                                </IconButton>\r\n                            </div>\r\n                        </div>\r\n\r\n                    )\r\n                })}\r\n            </div>\r\n            <div className='buttons'>\r\n                <Button\r\n                    variant={'contained'}\r\n                    color={props.filter === 'All' ? 'primary' : 'default'}\r\n                    onClick={onAllClickHandler}>All\r\n                </Button>\r\n                <Button\r\n                    variant={'contained'}\r\n                    color={props.filter === 'Active' ? 'primary' : 'default'}\r\n                    onClick={onActiveClickHandler}>Active\r\n                </Button>\r\n                <Button\r\n                    variant={'contained'}\r\n                    color={props.filter === 'Completed' ? 'primary' : 'default'}\r\n                    onClick={onCompletedClickHandler}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Todolist;\r\n","import {FilterTaskValues, TodolistType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\n\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST'\r\n    todolistId: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST'\r\n    title: string\r\n    todolistId: string\r\n    filter: FilterTaskValues\r\n}\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-NAME'\r\n    todolistId: string\r\n    title: string\r\n}\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER'\r\n    filter: FilterTaskValues\r\n    todolistId: string\r\n}\r\n\r\n\r\ntype ActionsType = RemoveTodolistActionType | AddTodolistActionType | ChangeTodolistTitleActionType | ChangeTodolistFilterActionType\r\n\r\nexport const RemoveTodolistAC = (todolistId: string): RemoveTodolistActionType  => ({type:'REMOVE-TODOLIST', todolistId })\r\nexport const AddTodolistAC = (title: string):AddTodolistActionType  =>\r\n    ({type:'ADD-TODOLIST', title, todolistId: v1(), filter: 'All'})\r\n\r\nexport const ChangeTodolistTitleAC = (title: string, todolistId: string): ChangeTodolistTitleActionType => ({type:'CHANGE-TODOLIST-NAME', title, todolistId })\r\nexport const ChangeTodolistFilterAC = (filter: FilterTaskValues, todolistId: string) : ChangeTodolistFilterActionType => ({type:'CHANGE-TODOLIST-FILTER', filter,todolistId })\r\n\r\nconst initialState: Array<TodolistType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistType> = initialState, action: ActionsType): Array<TodolistType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.todolistId)\r\n        case 'ADD-TODOLIST':\r\n            return [...state, {id: action.todolistId, title: action.title, filter: \"All\"}]\r\n        case 'CHANGE-TODOLIST-NAME':\r\n            let copyState = [...state]\r\n            let todolist = copyState.find(tl => tl.id === action.todolistId)\r\n            if (todolist) {\r\n                todolist.title = action.title\r\n            }\r\n            return copyState\r\n        case  'CHANGE-TODOLIST-FILTER':\r\n            let filteredTodolist = state.find(tl => tl.id === action.todolistId)\r\n            if (filteredTodolist) {\r\n                filteredTodolist.filter = action.filter\r\n            }\r\n            return [...state]\r\n        default:\r\n            return state\r\n    }\r\n}","import {TaskStateType, TaskType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\nimport {AddTodolistActionType, RemoveTodolistActionType} from \"./todolists-reducer\";\r\n\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK'\r\n    taskId: string\r\n    todolistId: string\r\n}\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK'\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-NAME'\r\n    taskId: string\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS'\r\n    taskId: string\r\n    isDone: boolean\r\n    todolistId: string\r\n}\r\n\r\n\r\ntype ActionsType = RemoveTaskActionType | AddTaskActionType | ChangeTaskTitleActionType |\r\n    ChangeTaskStatusActionType | AddTodolistActionType | RemoveTodolistActionType\r\n\r\nexport const RemoveTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType  => ({type:'REMOVE-TASK', taskId, todolistId })\r\nexport const AddTaskAC = (title: string, todolistId: string): AddTaskActionType  => ({type:'ADD-TASK', title,todolistId })\r\nexport const ChangeTaskTitleAC = (taskId: string, title: string, todolistId: string): ChangeTaskTitleActionType => ({type:'CHANGE-TASK-NAME', taskId, title, todolistId })\r\nexport const ChangeTaskStatusAC = (taskId: string, isDone: boolean, todolistId: string) : ChangeTaskStatusActionType => ({type:'CHANGE-TASK-STATUS', taskId, isDone, todolistId })\r\n\r\nconst initialState: TaskStateType = {}\r\nexport const tasksReducer = (state: TaskStateType = initialState, action: ActionsType): TaskStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(task => task.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            let newTask: TaskType = {\r\n                id: v1(),\r\n                title: action.title,\r\n                isDone: false\r\n            }\r\n            return {...state, [action.todolistId]: [newTask, ...state[action.todolistId]]}\r\n        case 'CHANGE-TASK-NAME':\r\n            return {...state, [action.todolistId]: state[action.todolistId].map( task => {\r\n                    if (task.id !== action.taskId) return task\r\n                    else return {...task, title: action.title}})}\r\n\r\n        case 'CHANGE-TASK-STATUS':\r\n            return {...state, [action.todolistId]: state[action.todolistId].map( task => {\r\n                if (task.id !== action.taskId) return task\r\n                    else return {...task, isDone: action.isDone}})}\r\n        case 'ADD-TODOLIST':\r\n            return {...state,[action.todolistId]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            let copyState = {...state}\r\n            delete copyState[action.todolistId]\r\n            return copyState\r\n        default:\r\n            return state\r\n    }\r\n}","import React from 'react';\nimport AddItemForm from './AddItemForm';\nimport Todolist from './Todolist';\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\nimport {Menu} from '@material-ui/icons';\nimport {\n    AddTodolistAC,\n    ChangeTodolistFilterAC,\n    ChangeTodolistTitleAC,\n    RemoveTodolistAC\n} from \"./state/todolists-reducer\";\nimport {AddTaskAC, ChangeTaskStatusAC, ChangeTaskTitleAC, RemoveTaskAC} from \"./state/tasks-reducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"./state/store\";\n\nexport type TaskType = {\n    id: string\n    title: string\n    isDone: boolean\n}\n\nexport type TodolistType = {\n    id: string\n    title: string\n    filter: FilterTaskValues\n}\nexport type TaskStateType = {\n    [key: string]: Array<TaskType>\n}\n\nexport type FilterTaskValues = 'All' | 'Active' | 'Completed'\n\nfunction AppWithRedux() {\n    //add hook useState for rerender UI\n\n    const todolists = useSelector<AppRootStateType, Array<TodolistType>>(state => state.todolists)\n    const tasks = useSelector<AppRootStateType, TaskStateType>(state => state.tasks)\n    const dispatch = useDispatch()\n\n\n    const changeTaskStatus = (id: string, newStatus: boolean, todolistId: string) => {\n        dispatch(ChangeTaskStatusAC(id, newStatus, todolistId))\n    }\n    const removeTask = (id: string, todolistId: string) => {\n        dispatch(RemoveTaskAC(id, todolistId))\n    }\n\n    const addTask = (title: string, todolistId: string) => {\n        dispatch(AddTaskAC(title, todolistId))\n    }\n\n    const addTodolist = (title: string) => {\n        const action = AddTodolistAC(title)\n        dispatch(action)\n    }\n\n    const removeTodolist = (todolistId: string) => {\n        const action = RemoveTodolistAC(todolistId)\n        dispatch(action)\n    }\n    const onChangeTaskTitle = (id: string, newTitle: string, todolistId: string) => {\n        dispatch(ChangeTaskTitleAC(id, newTitle,todolistId))\n    }\n\n    const onChangeTodolistTitle = (newTitle: string, todolistId: string) => {\n        dispatch(ChangeTodolistTitleAC(newTitle,todolistId))\n    }\n    const changeFilterForTask = (filter: FilterTaskValues, todolistId: string) => {\n        dispatch(ChangeTodolistFilterAC(filter,todolistId))\n    }\n\n    return (\n        <div className=\"App\">\n            <AppBar position={'static'}>\n                <Toolbar>\n                    <IconButton edge={'start'} color={'inherit'} aria-label={'menu'}>\n                        <Menu/>\n                    </IconButton>\n                    <Typography variant={'h6'}>\n                        News\n                    </Typography>\n                    <Button color={'inherit'}>Login</Button>\n                </Toolbar>\n            </AppBar>\n\n            <Container>\n                <Grid container style={{padding: '20px'}}>\n                    <AddItemForm addItem={addTodolist}/>\n                </Grid>\n\n                <Grid container spacing={3}>\n                    {\n                        todolists.map(tl => {\n                            let tasksForTodolist = tasks[tl.id]\n                            if (tl.filter === 'Active') {\n                                tasksForTodolist = tasksForTodolist.filter(task => !task.isDone)\n                            }\n                            if (tl.filter === 'Completed') {\n                                tasksForTodolist = tasksForTodolist.filter(task => task.isDone)\n                            }\n                            return <Grid item>\n                                <Paper style={{padding: '10px'}}>\n                                    <Todolist title={tl.title}\n                                              id={tl.id}\n                                              key={tl.id}\n                                              changeTaskStatus={changeTaskStatus}\n                                              removeTask={removeTask}\n                                              tasks={tasksForTodolist}\n                                              changeFilterForTask={changeFilterForTask}\n                                              addNewTask={addTask}\n                                              filter={tl.filter}\n                                              removeTodolist={removeTodolist}\n                                              onChangeTaskTitle={onChangeTaskTitle}\n                                              onChangeTodolistTitle={onChangeTodolistTitle}\n                                    />\n                                </Paper>\n                            </Grid>\n                        })\n                    }\n                </Grid>\n            </Container>\n        </div>\n    );\n}\n\nexport default AppWithRedux;\n","import {tasksReducer} from './tasks-reducer';\r\nimport {todolistsReducer} from './todolists-reducer';\r\nimport {combineReducers, createStore} from 'redux';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer);\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport AppWithRedux from './AppWithRedux';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './state/store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <Provider store={store}>\r\n          <AppWithRedux />\r\n      </Provider>\r\n\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}