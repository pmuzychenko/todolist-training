{"version":3,"sources":["api/todolist-api.ts","reportWebVitals.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/Todolist/todolists-reducer.ts","features/TodolistsList/Todolist/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/Todolist/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/AppWithRedux.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","ResponseFromServer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","get","todolistId","title","put","post","delete","taskId","model","authAPI","userData","handleServerAppError","data","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","isInitialized","setAppInitializedValueAC","UpdateTaskTC","domainModel","getState","checkedTask","tasks","find","task","id","apiModel","deadline","description","priority","startDate","res","resultCode","Success","updateTaskAC","catch","console","warn","AddItemForm","React","memo","props","log","useState","setTitle","setError","addItem","trim","className","variant","size","onChange","e","newTitle","currentTarget","onKeyPress","key","label","helperText","IconButton","color","onClick","disabled","AddBox","EditableSpan","editMode","setEditMode","onBlur","onChangeTitle","autoFocus","onDoubleClick","Task","changeTaskStatus","onChangeTaskTitle","removeTask","changeTaskStatusHandler","useCallback","newIsDoneValue","checked","Completed","New","Checkbox","Delete","Todolist","entityStatus","changeFilterForTask","_addNewTask","filter","_removeTodolist","_onChangeTodolistTitle","demo","useDispatch","useEffect","setTasksAC","items","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","addNewTask","removeTodolist","onChangeTodolistTitle","tasksForTodolist","t","map","Button","TodolistsList","useSelector","state","auth","todolists","addTodolist","todolist","item","createTodolistTC","changeTodolistEntityStatusAC","removeTodolistAC","removeTodolistTC","changeTodolistTitleAC","updateTodolistTitleTC","changeTodolistFilterAC","newStatus","removeTaskAC","RemoveTaskTC","addTask","AddTaskTC","Grid","container","style","padding","spacing","tl","Paper","to","Alert","elevation","ErrorSnackbar","appStatus","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","AppWithRedux","finally","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","path","render","exact","from","top","textAlign","width","CircularProgress","rootReducer","combineReducers","action","stateCopy","forEach","todoListId","copyState","store","createStore","composeWithDevTools","applyMiddleware","thunk","window","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.3c88faba.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'b9ba1f54-fd53-4073-a80c-f6586b8bff61'\r\n    }\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\n\r\n//api\r\nexport const todolistAPI = {\r\n    getTodolists() {\r\n        return instance.get<Array<TodolistType>>('todo-lists')\r\n    },\r\n\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${todolistId}`, {title})\r\n    },\r\n\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title})\r\n    },\r\n\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    },\r\n}\r\n\r\nexport const authAPI = {\r\n    login(userData: LoginParamsType) {\r\n        return instance.post<ResponseType<{ userId: number }>>('auth/login', userData)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<{ id: number, email: string, login: string }>>('auth/me')\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>('auth/login')\r\n    }\r\n}\r\n\r\n//types\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport enum ResponseFromServer {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\n\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\n\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {setAppErrorAC, setAppErrorActionType, setAppStatusAC, setAppStatusActionType} from '../app/app-reducer';\r\nimport {Dispatch} from 'redux';\r\nimport {ResponseType} from '../api/todolist-api'\r\n\r\n// generic function\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: ErrorUtilsDispatchType) => {\r\n    dispatch(setAppErrorAC(error.message))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<setAppStatusActionType | setAppErrorActionType>","import {\r\n    setAppErrorActionType,\r\n    setAppInitializedActionType,\r\n    setAppInitializedValueAC,\r\n    setAppStatusAC,\r\n    setAppStatusActionType\r\n} from \"../../app/app-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {authAPI, LoginParamsType, ResponseFromServer} from \"../../api/todolist-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(data)\r\n        .then((res) => {\r\n            if (res.data.resultCode === ResponseFromServer.Success) {\r\n                dispatch((setIsLoggedInAC(true)))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(setAppInitializedValueAC(true))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | setAppStatusActionType | setAppErrorActionType\r\n    | setAppInitializedActionType\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/todolist-api\";\r\nimport {setIsLoggedInAC} from \"../features/Login/auth-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type ResponseErrorType = string | null\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as ResponseErrorType,\r\n    isInitialized: false\r\n}\r\ntype InitialStateType = typeof initialState\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS': {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        case 'APP/SET-ERROR': {\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n        }\r\n        case 'APP/SET-INITIALIZED': {\r\n            return {\r\n                ...state,\r\n                isInitialized: action.isInitialized\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\ntype ActionsType = setAppStatusActionType | setAppErrorActionType | setAppInitializedActionType\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setAppErrorAC = (error: ResponseErrorType) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppInitializedValueAC = (isInitialized: boolean) => ({\r\n    type: 'APP/SET-INITIALIZED',\r\n    isInitialized\r\n} as const)\r\n\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.me()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true));\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n        .finally(() => dispatch(setAppInitializedValueAC(true)))\r\n}\r\n\r\nexport type setAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type setAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type setAppInitializedActionType = ReturnType<typeof setAppInitializedValueAC>\r\n\r\n\r\n\r\n","import {ResponseFromServer, todolistAPI, TodolistType} from \"../../../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType, setAppStatusAC} from \"../../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../../utils/error-utils\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case \"GET-TODOLISTS\": {\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: \"idle\"}))\r\n        }\r\n\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl.id !== action.todolistId)\r\n        }\r\n\r\n        case 'ADD-TODOLIST': {\r\n            return [{...action.todolist, filter: 'all', entityStatus: \"idle\"}, ...state]\r\n        }\r\n\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            return state.map(tl => tl.id === action.todolistId ? {...tl, title: action.title} : tl)\r\n        }\r\n\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            return state.map(tl => tl.id === action.todolistId ? {...tl, filter: action.filter} : tl)\r\n        }\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS': {\r\n            return state.map(tl => tl.id === action.todolistId ? {...tl, entityStatus: action.entityStatus} : tl)\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const removeTodolistAC = (todolistId: string) => ({type: 'REMOVE-TODOLIST', todolistId} as const)\r\n\r\nexport const addTodolistAC = (todolist: TodolistType) =>\r\n    ({type: 'ADD-TODOLIST', todolist} as const)\r\n\r\nexport const changeTodolistTitleAC = (title: string, todolistId: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    title,\r\n    todolistId\r\n} as const)\r\n\r\nexport const changeTodolistFilterAC = (todolistId: string, filter: FilterValuesType,) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    filter,\r\n    todolistId\r\n} as const)\r\n\r\nexport const getTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'GET-TODOLISTS', todolists} as const)\r\n\r\nexport const changeTodolistEntityStatusAC = (todolistId: string, entityStatus: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS',\r\n    todolistId,\r\n    entityStatus\r\n} as const)\r\n\r\n//thunks\r\nexport const getTodolistTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.getTodolists()\r\n        .then(res => {\r\n            dispatch(getTodolistsAC(res.data))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const removeTodolistTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n\r\n    todolistAPI.deleteTodolist(todolistId)\r\n        .then(() => {\r\n            dispatch(removeTodolistAC(todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const createTodolistTC = (title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.createTodolist(title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === ResponseFromServer.Success) {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const updateTodolistTitleTC = (todolistId: string, title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.updateTodolist(todolistId, title)\r\n        .then(() => {\r\n            dispatch(changeTodolistTitleAC(title, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n//types\r\n\r\n\r\ntype ActionsType =\r\n    | ReturnType<typeof getTodolistsAC>\r\n    | ReturnType<typeof removeTodolistAC>\r\n    | ReturnType<typeof addTodolistAC>\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}","import {\r\n    ResponseFromServer,\r\n    TaskPriorities,\r\n    TaskStatuses,\r\n    TaskType,\r\n    todolistAPI,\r\n    UpdateTaskModelType\r\n} from \"../../../api/todolist-api\";\r\nimport {TaskStateType} from \"../../../app/AppWithRedux\";\r\nimport {Dispatch} from 'redux';\r\nimport {AppRootStateType} from \"../../../app/store\";\r\nimport {addTodolistAC, getTodolistsAC, removeTodolistAC} from \"./todolists-reducer\";\r\nimport {setAppStatusAC} from \"../../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../../utils/error-utils\";\r\n\r\n\r\nconst initialState: TaskStateType = {}\r\n\r\nexport const tasksReducer = (state: TaskStateType = initialState, action: ActionsType): TaskStateType => {\r\n    switch (action.type) {\r\n        case \"GET-TODOLISTS\": {\r\n            let stateCopy = {...state}\r\n            action.todolists.forEach(tl => stateCopy[tl.id] = [])\r\n            return stateCopy\r\n        }\r\n        case 'REMOVE-TASK': {\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        }\r\n        case 'ADD-TASK': {\r\n            return {\r\n                ...state,\r\n                [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]\r\n            }\r\n        }\r\n        case 'UPDATE-TASK': {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.todolist.id]: []\r\n            }\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const copyState = {...state};\r\n            delete copyState[action.todolistId];\r\n            return copyState;\r\n        }\r\n        case \"SET-TASKS\": {\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n//actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => ({\r\n    type: 'REMOVE-TASK',\r\n    taskId: taskId,\r\n    todolistId: todolistId\r\n} as const)\r\n\r\nexport const addTaskAC = (task: TaskType) => ({type: 'ADD-TASK', task} as const)\r\n\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) => ({\r\n    type: 'UPDATE-TASK',\r\n    model,\r\n    todolistId,\r\n    taskId\r\n} as const)\r\n\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => ({\r\n    type: 'SET-TASKS',\r\n    tasks,\r\n    todolistId\r\n} as const)\r\n\r\n\r\n//thunks\r\nexport const SetTasksTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.getTasks(todolistId)\r\n        .then(res => {\r\n            dispatch(setTasksAC(res.data.items, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const RemoveTaskTC = (todolistId: string, taskId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.deleteTask(todolistId, taskId)\r\n        .then(() => {\r\n            dispatch(removeTaskAC(taskId, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const AddTaskTC = (todolistId: string, title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.createTask(todolistId, title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === ResponseFromServer.Success) {\r\n                dispatch((addTaskAC(res.data.data.item)))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n\r\nexport const UpdateTaskTC = (todolistId: string, taskId: string, domainModel: UpdateDomainTaskModelType) => (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n    const tasks = getState().tasks\r\n    const tasksForCurrentTodolist = tasks[todolistId]\r\n    const checkedTask = tasksForCurrentTodolist.find(task => task.id === taskId)\r\n    if (!checkedTask) {\r\n        console.warn('Task is not exist in the state')\r\n        return\r\n    }\r\n    const apiModel: UpdateTaskModelType = {\r\n        deadline: checkedTask.deadline,\r\n        description: checkedTask.description,\r\n        priority: checkedTask.priority,\r\n        startDate: checkedTask.startDate,\r\n        status: checkedTask.status,\r\n        title: checkedTask.title,\r\n        ...domainModel\r\n    }\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.updateTask(todolistId, taskId, apiModel)\r\n        .then((res) => {\r\n            if (res.data.resultCode === ResponseFromServer.Success) {\r\n                dispatch(updateTaskAC(taskId, domainModel, todolistId))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n// types\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | ReturnType<typeof addTodolistAC>\r\n    | ReturnType<typeof removeTodolistAC>\r\n    | ReturnType<typeof getTodolistsAC>\r\n    | ReturnType<typeof setTasksAC>\r\n\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport TextField from '@material-ui/core/TextField/TextField';\r\nimport {AddBox} from \"@material-ui/icons\";\r\nimport {IconButton} from \"@material-ui/core\";\r\n\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n    console.log(\"AddItemForm is called\")\r\n    const [title, setTitle] = useState('')\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== '') {\r\n            props.addItem(title)\r\n            setTitle('')\r\n        } else {\r\n            setError('The title is required')\r\n        }\r\n    }\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setError('')\r\n        let newTitle = e.currentTarget.value\r\n        setTitle(newTitle)\r\n    }\r\n\r\n    const onPressKeyHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n        if (e.key === 'Enter') {\r\n            addItem()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='addItemForm'>\r\n            <TextField\r\n                variant={'outlined'}\r\n                size={'small'}\r\n                value={title}\r\n                onChange={onChangeTitle}\r\n                onKeyPress={onPressKeyHandler}\r\n                error={!!error}\r\n                label={'Title'}\r\n                helperText={error}\r\n            />\r\n            <IconButton color='primary' onClick={addItem} disabled={props.disabled}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    );\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\n\r\nexport type EditableSpanPropsType = {\r\n    value: string\r\n    onChangeTitle: (newValue: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo(function(props: EditableSpanPropsType) {\r\n    console.log('Editable span is called')\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.value)\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.value)\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChangeTitle(title)\r\n    }\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title}\r\n                     onChange={changeTitle}\r\n                     onBlur={activateViewMode}\r\n                     disabled={props.disabled}\r\n                     autoFocus/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n})\r\n","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport {IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TaskType} from \"../../../../api/todolist-api\";\r\n\r\nexport type TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    removeTask: (id: string, todolistId: string) => void\r\n    onChangeTaskTitle: (id: string, newTitle: string, todolistId: string) => void\r\n}\r\nexport const Task: React.FC<TaskPropsType> = React.memo(({task, todolistId, changeTaskStatus, onChangeTaskTitle, removeTask}) => {\r\n    console.log('Task is called')\r\n\r\n    const changeTaskStatusHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        changeTaskStatus(task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, todolistId)\r\n    }, [task.id, todolistId]);\r\n\r\n\r\n    const removeTaskHandler = () => {\r\n        removeTask(task.id, todolistId)\r\n    }\r\n\r\n    const onChangeTitle = useCallback((newTitle: string) => {\r\n        onChangeTaskTitle(task.id, newTitle, todolistId)\r\n    }, [onChangeTaskTitle, task.id, todolistId])\r\n\r\n    return (\r\n        <div className='tasks'>\r\n            <div key={task.id} className={task.status ? 'is-done' : ''}>\r\n                <Checkbox checked={task.status === TaskStatuses.Completed}\r\n                          onChange={changeTaskStatusHandler}\r\n                          color='primary'\r\n                />\r\n                <EditableSpan value={task.title} onChangeTitle={onChangeTitle}/>\r\n                <IconButton onClick={removeTaskHandler}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </div>\r\n        </div>\r\n    )\r\n})","import React, {useCallback, useEffect} from 'react';\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm';\r\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {FilterValuesType} from \"./todolists-reducer\";\r\nimport {TaskStatuses, TaskType} from \"../../../api/todolist-api\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {SetTasksTC} from \"./tasks-reducer\";\r\nimport {RequestStatusType} from '../../../app/app-reducer';\r\n\r\ntype PropsType = {\r\n    title: string\r\n    entityStatus: RequestStatusType\r\n    tasks: Array<TaskType>\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    removeTask: (id: string, todolistId: string) => void\r\n    changeFilterForTask: (filter: FilterValuesType, todolistId: string) => void\r\n    _addNewTask: (title: string, todolistId: string) => void\r\n    filter: FilterValuesType\r\n    id: string\r\n    _removeTodolist: (todolistId: string) => void\r\n    onChangeTaskTitle: (id: string, newTitle: string, todolistId: string) => void\r\n    _onChangeTodolistTitle: (newTitle: string, todolistId: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist: React.FC<PropsType> = React.memo(function (\r\n    {\r\n        id, title, entityStatus, tasks, changeTaskStatus, removeTask, changeFilterForTask, _addNewTask, filter,\r\n        _removeTodolist, onChangeTaskTitle, _onChangeTodolistTitle, demo = false\r\n    }\r\n) {\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return;\r\n        }\r\n        dispatch(SetTasksTC(id))\r\n    }, [])\r\n\r\n    const onAllClickHandler = useCallback(() => {\r\n        changeFilterForTask('all', id)\r\n    }, [changeFilterForTask, id])\r\n\r\n    const onActiveClickHandler = useCallback(() => {\r\n        changeFilterForTask('active', id)\r\n    }, [changeFilterForTask, id])\r\n\r\n    const onCompletedClickHandler = useCallback(() => {\r\n        changeFilterForTask('completed', id)\r\n    }, [changeFilterForTask, id])\r\n\r\n    const addNewTask = useCallback((title: string) => {\r\n        _addNewTask(title, id)\r\n    }, [_addNewTask, id])\r\n\r\n\r\n    const removeTodolist = useCallback(() => {\r\n        _removeTodolist(id)\r\n    }, [_removeTodolist, id])\r\n\r\n    const onChangeTodolistTitle = useCallback((newTitle: string) => {\r\n        _onChangeTodolistTitle(newTitle, id)\r\n    }, [_onChangeTodolistTitle, id])\r\n\r\n    let tasksForTodolist = tasks\r\n\r\n    if (filter === 'active') {\r\n        tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (filter === 'completed') {\r\n        tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return (\r\n        <div className='todolist'>\r\n            <div>\r\n                <h2><EditableSpan value={title}\r\n                                  onChangeTitle={onChangeTodolistTitle}\r\n                                  disabled={entityStatus === 'loading'}/>\r\n                    <IconButton onClick={removeTodolist} disabled={entityStatus === 'loading'}>\r\n                        <Delete/>\r\n                    </IconButton>\r\n                </h2>\r\n            </div>\r\n            <AddItemForm addItem={addNewTask} disabled={entityStatus === 'loading'}/>\r\n            <div>\r\n                {tasksForTodolist.map(task => <Task\r\n                    key={task.id}\r\n                    task={task} todolistId={id} removeTask={removeTask}\r\n                    changeTaskStatus={changeTaskStatus} onChangeTaskTitle={onChangeTaskTitle}\r\n                />)}\r\n            </div>\r\n            <div className='buttons'>\r\n                <Button\r\n                    variant={'contained'}\r\n                    color={filter === 'all' ? 'primary' : 'default'}\r\n                    onClick={onAllClickHandler}>All\r\n                </Button>\r\n                <Button\r\n                    variant={'contained'}\r\n                    color={filter === 'active' ? 'primary' : 'default'}\r\n                    onClick={onActiveClickHandler}>Active\r\n                </Button>\r\n                <Button\r\n                    variant={'contained'}\r\n                    color={filter === 'completed' ? 'primary' : 'default'}\r\n                    onClick={onCompletedClickHandler}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../app/store\";\r\nimport {\r\n    changeTodolistFilterAC,\r\n    createTodolistTC, FilterValuesType,\r\n    getTodolistTC,\r\n    removeTodolistTC,\r\n    TodolistDomainType,\r\n    updateTodolistTitleTC\r\n} from \"./todolists-reducer\";\r\nimport {TaskStatuses} from \"../../../api/todolist-api\";\r\nimport {AddTaskTC, RemoveTaskTC, UpdateTaskTC} from \"./tasks-reducer\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {AddItemForm} from \"../../../components/AddItemForm/AddItemForm\";\r\nimport {Todolist} from \"./Todolist\";\r\nimport {TaskStateType} from \"../../../app/AppWithRedux\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype TodolistsListPropsType = {\r\n    demo?: boolean\r\n}\r\nexport const TodolistsList: React.FC<TodolistsListPropsType> = ({demo = false}) => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TaskStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        dispatch(getTodolistTC())\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(createTodolistTC(title))\r\n    }, [dispatch]);\r\n\r\n    const removeTodolist = useCallback((todolistId: string) => {\r\n        dispatch(removeTodolistTC(todolistId))\r\n    }, []);\r\n\r\n    const onChangeTodolistTitle = useCallback((newTitle: string, todolistId: string) => {\r\n        dispatch(updateTodolistTitleTC(todolistId, newTitle))\r\n    }, []);\r\n\r\n    const changeFilterForTask = useCallback((filter: FilterValuesType, todolistId: string) => {\r\n        dispatch(changeTodolistFilterAC(todolistId, filter))\r\n    }, []);\r\n\r\n    const changeTaskStatus = useCallback((id: string, newStatus: TaskStatuses, todolistId: string) => {\r\n        dispatch(UpdateTaskTC(todolistId, id, {status: newStatus}))\r\n    }, []);\r\n\r\n    const onChangeTaskTitle = useCallback((id: string, newTitle: string, todolistId: string) => {\r\n        dispatch(UpdateTaskTC(todolistId, id, {title: newTitle}))\r\n    }, []);\r\n\r\n    const removeTask = useCallback((id: string, todolistId: string) => {\r\n        dispatch(RemoveTaskTC(todolistId, id))\r\n    }, []);\r\n\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        dispatch(AddTaskTC(todolistId, title))\r\n    }, []);\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: '20px'}}>\r\n                <AddItemForm addItem={addTodolist}/>\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                {\r\n                    todolists.map(tl => {\r\n\r\n                        let tasksForTodolist = tasks[tl.id]\r\n\r\n                        return <Grid item>\r\n                            <Paper style={{padding: '10px'}}>\r\n                                <Todolist title={tl.title}\r\n                                          id={tl.id}\r\n                                          key={tl.id}\r\n                                          entityStatus={tl.entityStatus}\r\n                                          changeTaskStatus={changeTaskStatus}\r\n                                          removeTask={removeTask}\r\n                                          tasks={tasksForTodolist}\r\n                                          changeFilterForTask={changeFilterForTask}\r\n                                          _addNewTask={addTask}\r\n                                          filter={tl.filter}\r\n                                          _removeTodolist={removeTodolist}\r\n                                          onChangeTaskTitle={onChangeTaskTitle}\r\n                                          _onChangeTodolistTitle={onChangeTodolistTitle}\r\n                                          demo={demo}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                    })\r\n                }\r\n            </Grid>\r\n        </>\r\n    )\r\n}","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {ResponseErrorType, setAppErrorAC} from \"../../app/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, ResponseErrorType>( state => state.appStatus.error)\r\n    const dispatch = useDispatch()\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from \"formik\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from './auth-reducer';\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Redirect} from 'react-router-dom';\r\n\r\n\r\nexport type FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\nexport const Login = () => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {}\r\n            if (!values.email) {\r\n                errors.email = 'Required'\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address'\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Password must be 3 or more characters'\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n    });\r\n    if (isLoggedIn) {\r\n\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            type=\"email\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.errors.email && formik.touched.email ?\r\n                            <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.errors.password && formik.touched.password ?\r\n                            <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps('rememberMe')}/>}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport {Menu} from '@material-ui/icons';\r\nimport {TaskType} from \"../api/todolist-api\";\r\nimport {TodolistsList} from \"../features/TodolistsList/Todolist/TodolistsList\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {initializeAppTC, RequestStatusType} from \"./app-reducer\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport React, {useEffect} from \"react\";\r\nimport {Redirect, Route, Switch} from \"react-router-dom\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {logoutTC} from \"../features/Login/auth-reducer\";\r\n\r\n\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\n\r\nfunction AppWithRedux({demo = false}: PropsType) {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.appStatus.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.appStatus.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const logoutHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n            <div className=\"App\">\r\n                <ErrorSnackbar/>\r\n                <AppBar position={'static'}>\r\n                    <Toolbar>\r\n                        <IconButton edge={'start'} color={'inherit'} aria-label={'menu'}>\r\n                            <Menu/>\r\n                        </IconButton>\r\n                        <Typography variant={'h6'}>\r\n                            News\r\n                        </Typography>\r\n\r\n                        {isLoggedIn && <Button color={'inherit'}\r\n                                               onClick={logoutHandler}>Logout</Button>}\r\n\r\n                    </Toolbar>\r\n                    {status === 'loading' && <LinearProgress color={'secondary'}/>}\r\n                </AppBar>\r\n                <Container fixed>\r\n                    <Switch>\r\n                        <Route path={'/login'} render={() => <Login/>}/>\r\n                        <Route exact path={'/'} render={() => <TodolistsList demo={demo}/>}/>\r\n                        <Redirect from={'/todolist-training'} to={'/'}/>\r\n                        <Route path={'/404'} render={() => <h1> 404: Page not found!</h1>}/>\r\n                        <Redirect from={'*'} to={'/404'}/>\r\n                    </Switch>\r\n                </Container>\r\n            </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n","import {tasksReducer} from '../features/TodolistsList/Todolist/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/Todolist/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from \"redux-thunk\";\r\nimport {appReducer} from \"./app-reducer\";\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { authReducer } from '../features/Login/auth-reducer';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    appStatus: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './app/index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport AppWithRedux from './app/AppWithRedux';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './app/store';\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <HashRouter>\r\n            <AppWithRedux/>\r\n        </HashRouter>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}