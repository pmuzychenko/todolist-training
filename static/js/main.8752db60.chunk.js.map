{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","Todolist.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addItem","trim","className","variant","size","value","onChange","e","newTitle","currentTarget","onKeyPress","key","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","onBlur","onChangeTitle","autoFocus","onDoubleClick","Todolist","onChangeTodolistTitle","id","removeTodolist","Delete","addNewTask","tasks","map","task","isDone","Checkbox","checked","changeTaskStatus","onChangeTaskTitle","removeTask","Button","filter","changeFilterForTask","App","todolistId1","v1","todolistId2","todolists","setTodolists","setTasks","newStatus","todolistId","find","todolistTasks","addTask","newTask","todolist","tl","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","Grid","container","style","padding","newTodolistId","spacing","tasksForTodolist","item","Paper","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2RAwDeA,MA9Cf,SAAqBC,GAAmB,IAAD,EACTC,mBAAS,IADA,mBAC5BC,EAD4B,KACrBC,EADqB,OAETF,mBAAwB,MAFf,mBAE5BG,EAF4B,KAErBC,EAFqB,KAK7BC,EAAU,WACS,KAAjBJ,EAAMK,QACNP,EAAMM,QAAQJ,GACdC,EAAS,KAETE,EAAS,0BAejB,OACI,sBAAKG,UAAU,cAAf,UACI,cAAC,IAAD,CACIC,QAAS,WACTC,KAAM,QACNC,MAAOT,EACPU,SAlBU,SAACC,GACnBR,EAAS,IACT,IAAIS,EAAWD,EAAEE,cAAcJ,MAC/BR,EAASW,IAgBDE,WAbc,SAACH,GACT,UAAVA,EAAEI,KACFX,KAYIF,QAASA,EACTc,MAAO,QACPC,WAAYf,IAIhB,cAACgB,EAAA,EAAD,CAAYC,MAAM,UAAUC,QAAShB,EAArC,SACI,cAACiB,EAAA,EAAD,U,SCnBDC,MAtBf,SAAsBxB,GAAmB,IAAD,EACJC,oBAAkB,GADd,mBAC7BwB,EAD6B,KACnBC,EADmB,OAEVzB,mBAAiBD,EAAMW,OAFb,mBAE7BT,EAF6B,KAEtBC,EAFsB,KAiBpC,OAAOsB,EACF,cAAC,IAAD,CAAWd,MAAOT,EAAOU,SALV,SAACC,GACjBV,EAASU,EAAEE,cAAcJ,QAIwBgB,OAV5B,WACrBD,GAAY,GACZ1B,EAAM4B,cAAc1B,IAQuD2B,WAAS,IAClF,sBAAMC,cAfa,WACrBJ,GAAY,GACZvB,EAASH,EAAMW,QAab,SAAwCX,EAAMW,S,2BC+EzCoB,MArFf,SAAkB/B,GAyBd,OACI,sBAAKQ,UAAU,WAAf,UACI,8BACI,+BAAI,cAAC,EAAD,CAAcG,MAAOX,EAAME,MAAO0B,cARpB,SAACd,GAC3Bd,EAAMgC,sBAAsBlB,EAAUd,EAAMiC,OAQhC,cAACb,EAAA,EAAD,CAAYE,QAZL,WACnBtB,EAAMkC,eAAelC,EAAMiC,KAWf,SACI,cAACE,EAAA,EAAD,WAIZ,cAAC,EAAD,CAAa7B,QAtBF,SAACJ,GAChBF,EAAMoC,WAAWlC,EAAOF,EAAMiC,OAsB1B,8BACKjC,EAAMqC,MAAMC,KAAI,SAAAC,GAWb,OACI,qBAAK/B,UAAU,QAAf,SACI,sBAAmBA,UAAW+B,EAAKC,OAAS,UAAY,GAAxD,UACI,cAACC,EAAA,EAAD,CAAUC,QAASH,EAAKC,OACd5B,SAdG,SAACC,GACtBb,EAAM2C,iBAAiBJ,EAAKN,GAAIpB,EAAEE,cAAc2B,QAAS1C,EAAMiC,KAc7CZ,MAAM,YAEhB,cAAC,EAAD,CAAcV,MAAO4B,EAAKrC,MAAO0B,cAXvB,SAACd,GACnBd,EAAM4C,kBAAkBL,EAAKN,GAAInB,EAAUd,EAAMiC,OAWzC,cAACb,EAAA,EAAD,CAAYE,QAfE,WACtBtB,EAAM6C,WAAWN,EAAKN,GAAIjC,EAAMiC,KAcxB,SACI,cAACE,EAAA,EAAD,QAPEI,EAAKN,WAe/B,sBAAKzB,UAAU,UAAf,UACI,cAACsC,EAAA,EAAD,CACIrC,QAAS,YACTY,MAAwB,QAAjBrB,EAAM+C,OAAmB,UAAY,UAC5CzB,QAlEU,WACtBtB,EAAMgD,oBAAoB,MAAOhD,EAAMiC,KA8D/B,iBAKA,cAACa,EAAA,EAAD,CACIrC,QAAS,YACTY,MAAwB,WAAjBrB,EAAM+C,OAAsB,UAAY,UAC/CzB,QApEa,WACzBtB,EAAMgD,oBAAoB,SAAUhD,EAAMiC,KAgElC,oBAKA,cAACa,EAAA,EAAD,CACIrC,QAAS,YACTY,MAAwB,cAAjBrB,EAAM+C,OAAyB,UAAY,UAClDzB,QAtEgB,WAC5BtB,EAAMgD,oBAAoB,YAAahD,EAAMiC,KAkErC,8B,+DCyEDgB,MAlJf,WAAgB,IAAD,EAGLC,EAAcC,cACdC,EAAcD,cAJT,EAMuBlD,mBAA8B,CAC5D,CAACgC,GAAIiB,EAAahD,MAAO,gBAAiB6C,OAAQ,OAClD,CAACd,GAAImB,EAAalD,MAAO,cAAe6C,OAAQ,YARzC,mBAMJM,EANI,KAMOC,EANP,OAWerD,oBAAQ,mBAC7BiD,EAAc,CACX,CAACjB,GAAIkB,cAAMjD,MAAO,OAAQsC,QAAQ,GAClC,CAACP,GAAIkB,cAAMjD,MAAO,MAAOsC,QAAQ,GACjC,CAACP,GAAIkB,cAAMjD,MAAO,KAAMsC,QAAQ,GAChC,CAACP,GAAIkB,cAAMjD,MAAO,QAASsC,QAAQ,GACnC,CAACP,GAAIkB,cAAMjD,MAAO,QAASsC,QAAQ,KANT,cAQ7BY,EAAc,CACX,CAACnB,GAAIkB,cAAMjD,MAAO,OAAQsC,QAAQ,GAClC,CAACP,GAAIkB,cAAMjD,MAAO,SAAUsC,QAAQ,GACpC,CAACP,GAAIkB,cAAMjD,MAAO,QAASsC,QAAQ,GACnC,CAACP,GAAIkB,cAAMjD,MAAO,SAAUsC,QAAQ,GACpC,CAACP,GAAIkB,cAAMjD,MAAO,SAAUsC,QAAQ,KAbV,IAXvB,mBAWJH,EAXI,KAWGkB,EAXH,KA6BLZ,EAAmB,SAACV,EAAYuB,EAAoBC,GACtD,IACIlB,EADgBF,EAAMoB,GACDC,MAAK,SAAAnB,GAAI,OAAIA,EAAKN,KAAOA,KAC9CM,IACAA,EAAKC,OAASgB,EACdD,EAAS,eAAIlB,MAGfQ,EAAa,SAACZ,EAAYwB,GAC5B,IAAIE,EAAgBtB,EAAMoB,GAC1BpB,EAAMoB,GAAcE,EAAcZ,QAAO,SAAAR,GAAI,OAAIA,EAAKN,KAAOA,KAC7DsB,EAAS,eAAIlB,KAGXuB,EAAU,SAAC1D,EAAeuD,GAC5B,IAAIE,EAAgBtB,EAAMoB,GACtBI,EAAoB,CACpB5B,GAAIkB,cAAMjD,MAAOA,EAAOsC,QAAQ,GAEpCH,EAAMoB,GAAN,CAAqBI,GAArB,mBAAiCF,IACjCJ,EAAS,eAAIlB,KAGXW,EAAsB,SAACD,EAA0BU,GACnD,IAAIK,EAAWT,EAAUK,MAAK,SAAAK,GAAE,OAAIA,EAAG9B,KAAOwB,KAC1CK,IACAA,EAASf,OAASA,EAClBO,EAAa,YAAID,MAInBnB,EAAiB,SAACuB,GACpB,IAAIK,EAAWT,EAAUN,QAAO,SAAAgB,GAAE,OAAIA,EAAG9B,KAAOwB,KAChDH,EAAaQ,UACNzB,EAAMoB,GACbF,EAAS,eAAIlB,KAWXO,EAAoB,SAACX,EAAYnB,EAAkB2C,GACrD,IACIlB,EADgBF,EAAMoB,GACDC,MAAK,SAAAnB,GAAI,OAAIA,EAAKN,KAAOA,KAC9CM,IACAA,EAAKrC,MAAQY,EACbyC,EAAS,eAAIlB,MAGfL,EAAwB,SAAClB,EAAkB2C,GAC7C,IAAIK,EAAWT,EAAUK,MAAK,SAAAK,GAAE,OAAIA,EAAG9B,KAAOwB,KAE1CK,IACAA,EAAS5D,MAAQY,EACjBwC,EAAa,YAAID,MAIzB,OACI,sBAAK7C,UAAU,MAAf,UACI,cAACwD,EAAA,EAAD,CAAQC,SAAU,SAAlB,SACI,eAACC,EAAA,EAAD,WACI,cAAC9C,EAAA,EAAD,CAAY+C,KAAM,QAAS9C,MAAO,UAAW+C,aAAY,OAAzD,SACI,cAACC,EAAA,EAAD,MAEJ,cAACC,EAAA,EAAD,CAAY7D,QAAS,KAArB,kBAGA,cAACqC,EAAA,EAAD,CAAQzB,MAAO,UAAf,wBAIR,eAACkD,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,MAAO,CAACC,QAAS,QAAjC,SACI,cAAC,EAAD,CAAarE,QA1CT,SAACJ,GACjB,IAAI0E,EAAgBzB,cAIpBG,EAAa,CAHmB,CAC5BrB,GAAI2C,EAAe1E,MAAOA,EAAO6C,OAAQ,QAEjC,mBAAkBM,KAC9BE,EAAS,2BAAIlB,GAAL,kBAAauC,EAAgB,WAuC7B,cAACJ,EAAA,EAAD,CAAMC,WAAS,EAACI,QAAS,EAAzB,SAEQxB,EAAUf,KAAI,SAAAyB,GACV,IAAIe,EAAmBzC,EAAM0B,EAAG9B,IAOhC,MANkB,WAAd8B,EAAGhB,SACH+B,EAAmBA,EAAiB/B,QAAO,SAAAR,GAAI,OAAKA,EAAKC,WAE3C,cAAduB,EAAGhB,SACH+B,EAAmBA,EAAiB/B,QAAO,SAAAR,GAAI,OAAIA,EAAKC,WAErD,cAACgC,EAAA,EAAD,CAAMO,MAAI,EAAV,SACH,cAACC,EAAA,EAAD,CAAON,MAAO,CAACC,QAAS,QAAxB,SACI,cAAC,EAAD,CAAUzE,MAAO6D,EAAG7D,MACV+B,GAAI8B,EAAG9B,GAEPU,iBAAkBA,EAClBE,WAAYA,EACZR,MAAOyC,EACP9B,oBAAqBA,EACrBZ,WAAYwB,EACZb,OAAQgB,EAAGhB,OACXb,eAAgBA,EAChBU,kBAAmBA,EACnBZ,sBAAuBA,GATlB+B,EAAG9B,oBCvIvCgD,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8752db60.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\nimport TextField from '@material-ui/core/TextField/TextField';\nimport {AddBox} from \"@material-ui/icons\";\nimport {IconButton} from \"@material-ui/core\";\n\n\ntype PropsType = {\n    addItem: (title: string) => void\n}\n\nfunction AddItemForm(props: PropsType) {\n    const [title, setTitle] = useState('')\n    const [error, setError] = useState<string | null>(null)\n\n\n    const addItem = () => {\n        if (title.trim() !== '') {\n            props.addItem(title)\n            setTitle('')\n        } else {\n            setError('The title is required')\n        }\n    }\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setError('')\n        let newTitle = e.currentTarget.value\n        setTitle(newTitle)\n    }\n\n    const onPressKeyHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === 'Enter') {\n            addItem()\n        }\n    }\n\n    return (\n        <div className='addItemForm'>\n            <TextField\n                variant={'outlined'}\n                size={'small'}\n                value={title}\n                onChange={onChangeTitle}\n                onKeyPress={onPressKeyHandler}\n                error={!!error}\n                label={'Title'}\n                helperText={error}\n            />\n\n            {/*<Button variant='contained' color='primary' size='small' onClick={addItem}>+</Button>*/}\n            <IconButton color='primary' onClick={addItem}>\n                <AddBox/>\n            </IconButton>\n        </div>\n    );\n}\n\nexport default AddItemForm;\n","import React, {ChangeEvent, useState} from 'react';\nimport {TextField} from \"@material-ui/core\";\n\n\ntype PropsType = {\n    value: string\n    onChangeTitle: (newValue: string) => void\n}\n\nfunction EditableSpan(props: PropsType) {\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const [title, setTitle] = useState<string>(props.value)\n\n    const activateEditMode = () => {\n        setEditMode(true)\n        setTitle(props.value)\n    }\n    const activateViewMode = () => {\n        setEditMode(false)\n        props.onChangeTitle(title)\n    }\n\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    return editMode\n       ? <TextField value={title} onChange={changeTitle} onBlur={activateViewMode} autoFocus/>\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\n}\n\nexport default EditableSpan;\n","import React, {ChangeEvent} from 'react';\nimport {FilterTaskValues, TaskType} from \"./App\";\nimport AddItemForm from './AddItemForm';\nimport EditableSpan from \"./EditableSpan\";\nimport {Button, IconButton} from \"@material-ui/core\";\nimport {Delete} from \"@material-ui/icons\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\n\ntype PropsType = {\n    title: string\n    tasks: Array<TaskType>\n    changeTaskStatus: (id: string, value: boolean, todolistId: string) => void\n    removeTask: (id: string, todolistId: string) => void\n    changeFilterForTask: (filter: FilterTaskValues, todolistId: string) => void\n    addNewTask: (title: string, todolistId: string) => void\n    filter: FilterTaskValues\n    id: string\n    removeTodolist: (todolistId: string) => void\n    onChangeTaskTitle: (id: string, newTitle: string, todolistId: string) => void\n    onChangeTodolistTitle: (newTitle: string, todolistId: string) => void\n}\n\nfunction Todolist(props: PropsType) {\n\n    const onAllClickHandler = () => {\n        props.changeFilterForTask('All', props.id)\n    }\n    const onActiveClickHandler = () => {\n        props.changeFilterForTask('Active', props.id)\n    }\n    const onCompletedClickHandler = () => {\n        props.changeFilterForTask('Completed', props.id)\n    }\n\n    const addNewTask = (title: string) => {\n        props.addNewTask(title, props.id)\n    }\n\n\n    const removeTodolist = () => {\n        props.removeTodolist(props.id)\n    }\n    const onChangeTodolistTitle = (newTitle: string) => {\n        props.onChangeTodolistTitle(newTitle, props.id)\n    }\n\n\n    return (\n        <div className='todolist'>\n            <div>\n                <h2><EditableSpan value={props.title} onChangeTitle={onChangeTodolistTitle}/>\n                    <IconButton onClick={removeTodolist}>\n                        <Delete/>\n                    </IconButton>\n                </h2>\n            </div>\n            <AddItemForm addItem={addNewTask}/>\n            <div>\n                {props.tasks.map(task => {\n                    const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => {\n                        props.changeTaskStatus(task.id, e.currentTarget.checked, props.id)\n                    }\n                    const removeTaskHandler = () => {\n                        props.removeTask(task.id, props.id)\n                    }\n                    const onChangeTitle = (newTitle: string) => {\n                        props.onChangeTaskTitle(task.id, newTitle, props.id)\n                    }\n\n                    return (\n                        <div className='tasks'>\n                            <div key={task.id} className={task.isDone ? 'is-done' : ''}>\n                                <Checkbox checked={task.isDone}\n                                          onChange={changeTaskStatus}\n                                          color='primary'\n                                />\n                                <EditableSpan value={task.title} onChangeTitle={onChangeTitle}/>\n                                <IconButton onClick={removeTaskHandler}>\n                                    <Delete/>\n                                </IconButton>\n                            </div>\n                        </div>\n\n                    )\n                })}\n            </div>\n            <div className='buttons'>\n                <Button\n                    variant={'contained'}\n                    color={props.filter === 'All' ? 'primary' : 'default'}\n                    onClick={onAllClickHandler}>All\n                </Button>\n                <Button\n                    variant={'contained'}\n                    color={props.filter === 'Active' ? 'primary' : 'default'}\n                    onClick={onActiveClickHandler}>Active\n                </Button>\n                <Button\n                    variant={'contained'}\n                    color={props.filter === 'Completed' ? 'primary' : 'default'}\n                    onClick={onCompletedClickHandler}>Completed\n                </Button>\n            </div>\n        </div>\n    );\n}\n\nexport default Todolist;\n","import React, {useState} from 'react';\nimport {v1} from 'uuid';\nimport AddItemForm from './AddItemForm';\nimport Todolist from './Todolist';\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\nimport {Menu} from '@material-ui/icons';\n\nexport type TaskType = {\n    id: string\n    title: string\n    isDone: boolean\n}\n\ntype TodolistType = {\n    id: string\n    title: string\n    filter: FilterTaskValues\n}\ntype TaskStateType = {\n    [key: string]: Array<TaskType>\n}\n\nexport type FilterTaskValues = 'All' | 'Active' | 'Completed'\n\nfunction App() {\n    //add hook useState for rerender UI\n\n    const todolistId1 = v1()\n    const todolistId2 = v1()\n\n    const [todolists, setTodolists] = useState<Array<TodolistType>>([\n        {id: todolistId1, title: 'What to learn', filter: 'All'},\n        {id: todolistId2, title: 'What to buy', filter: 'Active'}\n    ])\n\n    const [tasks, setTasks] = useState<TaskStateType>({\n        [todolistId1]: [\n            {id: v1(), title: 'HTML', isDone: true},\n            {id: v1(), title: 'CSS', isDone: true},\n            {id: v1(), title: 'JS', isDone: true},\n            {id: v1(), title: 'REACT', isDone: false},\n            {id: v1(), title: 'REDUX', isDone: false}\n        ],\n        [todolistId2]: [\n            {id: v1(), title: 'Milk', isDone: true},\n            {id: v1(), title: 'Butter', isDone: true},\n            {id: v1(), title: 'Water', isDone: true},\n            {id: v1(), title: 'Tomato', isDone: false},\n            {id: v1(), title: 'Potato', isDone: false}\n        ]\n    })\n\n\n    const changeTaskStatus = (id: string, newStatus: boolean, todolistId: string) => {\n        let todolistTasks = tasks[todolistId]\n        let task = todolistTasks.find(task => task.id === id)\n        if (task) {\n            task.isDone = newStatus\n            setTasks({...tasks})\n        }\n    }\n    const removeTask = (id: string, todolistId: string) => {\n        let todolistTasks = tasks[todolistId]\n        tasks[todolistId] = todolistTasks.filter(task => task.id !== id)\n        setTasks({...tasks})\n    }\n\n    const addTask = (title: string, todolistId: string) => {\n        let todolistTasks = tasks[todolistId]\n        let newTask: TaskType = {\n            id: v1(), title: title, isDone: false\n        }\n        tasks[todolistId] = [newTask, ...todolistTasks]\n        setTasks({...tasks})\n    }\n\n    const changeFilterForTask = (filter: FilterTaskValues, todolistId: string) => {\n        let todolist = todolists.find(tl => tl.id === todolistId)\n        if (todolist) {\n            todolist.filter = filter\n            setTodolists([...todolists])\n        }\n    }\n\n    const removeTodolist = (todolistId: string) => {\n        let todolist = todolists.filter(tl => tl.id !== todolistId)\n        setTodolists(todolist)\n        delete tasks[todolistId]\n        setTasks({...tasks})\n    }\n    const addTodolist = (title: string) => {\n        let newTodolistId = v1()\n        let newTodolist: TodolistType = {\n            id: newTodolistId, title: title, filter: 'All'\n        }\n        setTodolists([newTodolist, ...todolists])\n        setTasks({...tasks, [newTodolistId]: []})\n    }\n\n    const onChangeTaskTitle = (id: string, newTitle: string, todolistId: string) => {\n        let todolistTasks = tasks[todolistId]\n        let task = todolistTasks.find(task => task.id === id)\n        if (task) {\n            task.title = newTitle\n            setTasks({...tasks})\n        }\n    }\n    const onChangeTodolistTitle = (newTitle: string, todolistId: string) => {\n        let todolist = todolists.find(tl => tl.id === todolistId)\n\n        if (todolist) {\n            todolist.title = newTitle\n            setTodolists([...todolists])\n        }\n    }\n\n    return (\n        <div className=\"App\">\n            <AppBar position={'static'}>\n                <Toolbar>\n                    <IconButton edge={'start'} color={'inherit'} aria-label={'menu'}>\n                        <Menu/>\n                    </IconButton>\n                    <Typography variant={'h6'}>\n                        News\n                    </Typography>\n                    <Button color={'inherit'}>Login</Button>\n                </Toolbar>\n            </AppBar>\n\n            <Container>\n                <Grid container style={{padding: '20px'}}>\n                    <AddItemForm addItem={addTodolist}/>\n                </Grid>\n\n                <Grid container spacing={3}>\n                    {\n                        todolists.map(tl => {\n                            let tasksForTodolist = tasks[tl.id]\n                            if (tl.filter === 'Active') {\n                                tasksForTodolist = tasksForTodolist.filter(task => !task.isDone)\n                            }\n                            if (tl.filter === 'Completed') {\n                                tasksForTodolist = tasksForTodolist.filter(task => task.isDone)\n                            }\n                            return <Grid item>\n                                <Paper style={{padding: '10px'}}>\n                                    <Todolist title={tl.title}\n                                              id={tl.id}\n                                              key={tl.id}\n                                              changeTaskStatus={changeTaskStatus}\n                                              removeTask={removeTask}\n                                              tasks={tasksForTodolist}\n                                              changeFilterForTask={changeFilterForTask}\n                                              addNewTask={addTask}\n                                              filter={tl.filter}\n                                              removeTodolist={removeTodolist}\n                                              onChangeTaskTitle={onChangeTaskTitle}\n                                              onChangeTodolistTitle={onChangeTodolistTitle}\n                                    />\n                                </Paper>\n                            </Grid>\n                        })\n                    }\n                </Grid>\n            </Container>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}